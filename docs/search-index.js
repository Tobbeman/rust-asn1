var searchIndex = {};
searchIndex["asn1"] = {"doc":"This library provides tools for decoding/encoding ASN.1 messages to/from their corresponding Rust types.","items":[[3,"BitString","asn1","A bit string.",null,null],[0,"aper","","Tools for encoding and decoding ASN.1 messages of the Aligned PER flavor.",null,null],[3,"Decoder","asn1::aper","A bit-wise cursor used to decode aligned PER messagses.",null,null],[3,"Encoding","","A wrapper for an aligned PER encoding.",null,null],[3,"Constraint","","An interval that desribes the limits on some value.\nTo indicate something is unbounded, set `min` and `max` to `None`.",null,null],[3,"Constraints","","A pair of `Constraint`s that describes the constraints on the value (if applicable) and encoded size of a type.\nA value is considered unconstrained if `value` and `size` are both set to `None`.",null,null],[12,"value","","",0,null],[12,"size","","",0,null],[4,"DecodeError","","",null,null],[13,"InvalidChoice","","",1,null],[13,"MalformedLength","","",1,null],[13,"MalformedInt","","",1,null],[13,"MissingSizeConstraint","","",1,null],[13,"MissingValueConstraint","","",1,null],[13,"NotEnoughBits","","",1,null],[13,"NotImplemented","","",1,null],[4,"EncodeError","","",null,null],[13,"MissingSizeConstraint","","",2,null],[13,"MissingValueConstraint","","",2,null],[13,"NotImplemented","","",2,null],[5,"encode_int","","Encode an aligned PER integer between `min` and `max`.",null,{"inputs":[{"name":"i64"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"encode_length","","Encode an aligned PER length determinant.",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"new","","Construct a new `Decoder` with an array of bytes.",3,null],[11,"read","","Read `n` bits. Where `0 &lt;= n &lt;= 8`. See [read_to_vec()](#method.read_to_vec) for larger `n`.\nReturns an `Err` if the read would consume more bits than are available. Else, returns the bits as a u8 with\nleft-padding.",3,null],[11,"read_u8","","Read a byte.",3,null],[11,"read_to_vec","","Read `len` bits into `content`.\nReturns an `Err` if the read would consume more bits than are available. Else, the bits as a `u8`s with\nleft-padding are pushed onto `content`.",3,null],[11,"decode_length","","Decode an aligned PER length determinant",3,null],[11,"decode_int","","Decode an Aligned PER integer between `min` and `max`",3,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",4,null],[11,"new","","Construct a new, empty `Encoding`.",4,{"inputs":[],"output":{"name":"encoding"}}],[11,"with_bytes_and_padding","","Construct a new `Encoding` with `bytes` and `r_pad` bits of right-padding.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"encoding"}}],[11,"with_bytes","","Construct a new `Encoding` with `bytes` and zero bits of right-padding.",4,{"inputs":[{"name":"vec"}],"output":{"name":"encoding"}}],[11,"append","","Append `other` to the end of `self`, starting with the `r_padding`th LSB of `self`.",4,null],[11,"bytes","","Get a reference to the bytes of an encoding.",4,null],[11,"bytes_mut","","Get a mutable reference to the bytes of an encoding.",4,null],[11,"r_padding","","Get the number of right-padding bits.",4,null],[11,"set_r_padding","","Set the number of right-padding bits.",4,null],[17,"LENGTH_DET_SHORT","","",null,null],[17,"LENGTH_DET_LONG","","",null,null],[17,"LENGTH_DET_FRAG","","",null,null],[17,"LENGTH_MASK_SHORT","","",null,null],[17,"LENGTH_MASK_LONG","","",null,null],[17,"UNCONSTRAINED","","",null,null],[8,"APerElement","","Trait for Aligned PER encoding/decoding.",null,null],[18,"CONSTRAINTS","","PER-visible Constraints",5,null],[10,"from_aper","","Constructor for the `Result` type given an aligned PER encoding.",5,{"inputs":[{"name":"decoder"},{"name":"constraints"}],"output":{"name":"result"}}],[10,"to_aper","","For use with `Encoding::append`",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"new","","Construct a new `Constraint`.",6,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"constraint"}}],[11,"min","","Get the lower bound.",6,null],[11,"max","","Get the upper bound.",6,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","asn1","",7,null],[11,"with_len","","Consturct a `BitString` of length `n` with all values set to 0.",7,{"inputs":[{"name":"usize"}],"output":{"name":"bitstring"}}],[11,"with_bytes_and_len","","Consturct a `BitString` of length `n` with initial values contained in `data`.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"bitstring"}}],[11,"get_num_bits","","Get the length of a `BitString`",7,null],[11,"set_num_bits","","Set the length of a `BitString` and initialize any new values to 0",7,null],[11,"is_set","","Check if bit `i` is set.",7,null],[11,"set","","Set bit `i` to `val`.",7,null],[11,"from_aper","","Construct a `BitString` from an aligned PER encoding.",7,{"inputs":[{"name":"decoder"},{"name":"constraints"}],"output":{"name":"result"}}],[11,"to_aper","","",7,null],[6,"ExtensionMarker","","A marker for extendable types.",null,null],[6,"SequencePreamble","","A preamble that describes the properties of the sequence type it preceeds.",null,null]],"paths":[[3,"Constraints"],[4,"DecodeError"],[4,"EncodeError"],[3,"Decoder"],[3,"Encoding"],[8,"APerElement"],[3,"Constraint"],[3,"BitString"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
